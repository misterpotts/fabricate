name: Module CI/CD

on: 
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs: 
  lint-commit-message:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Lint commit messages
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        shell: bash
        run: npm ci

      - name: Run tests
        shell: bash
        run: npm run coverageTest

      - name: Build project
        shell: bash
        run: npm run build

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist
          retention-days: 1

      - name: Preview release
        id: preview
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "## 📦 Release Preview" > preview.md
          echo "" >> preview.md
          echo "Running semantic-release dry run to preview what would be released..." >> preview.md
          echo "" >> preview.md
          
          # Run dry-run
          if OUTPUT=$(npx semantic-release --dry-run --no-ci --branches "refs/pull/**/*" --plugins "@semantic-release/commit-analyzer,@semantic-release/release-notes-generator" 2>&1); then
            echo "Semantic Release Dry Run Output:"
            echo "$OUTPUT"
            if echo "$OUTPUT" | grep -q "Release note for version"; then
              VERSION=$(echo "$OUTPUT" | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+')
              echo "🚀 **A new release would be created: \`v$VERSION\`**" >> preview.md
              echo "" >> preview.md
          
              # Extract release type
              if echo "$OUTPUT" | grep -q "major"; then
                echo "📈 **Release Type:** Major (breaking changes)" >> preview.md
              elif echo "$OUTPUT" | grep -q "minor"; then
                echo "📈 **Release Type:** Minor (new features)" >> preview.md
              elif echo "$OUTPUT" | grep -q "patch"; then
                echo "📈 **Release Type:** Patch (bug fixes)" >> preview.md
              fi
              echo "" >> preview.md
          
              # Extract and format release notes
              if echo "$OUTPUT" | grep -A 50 "Release note" | grep -q "###\|##\|#"; then
                echo "### 📝 Release Notes Preview" >> preview.md
                echo '```markdown' >> preview.md
                echo "$OUTPUT" | sed -n '/Release note/,/^[[:space:]]*$/p' | head -20 >> preview.md
                echo '```' >> preview.md
              fi
            else
              echo "ℹ️ **No release would be created** - no relevant changes detected." >> preview.md
              echo "" >> preview.md
              echo "Changes in this PR don't trigger a release based on conventional commit format." >> preview.md
              echo "" >> preview.md
              echo "💡 **Tip:** Use conventional commits to trigger releases:" >> preview.md
              echo "- \`feat:\` for new features (minor version)" >> preview.md
              echo "- \`fix:\` for bug fixes (patch version)" >> preview.md
              echo "- \`feat!:\` or \`BREAKING CHANGE:\` for breaking changes (major version)" >> preview.md
            fi
          else
            echo "⚠️ **Could not determine release preview** - there may be an issue with the semantic-release configuration." >> preview.md
            echo "" >> preview.md
            echo "<details><summary>Debug output</summary>" >> preview.md  
            echo "" >> preview.md
            echo '```' >> preview.md
            echo "$OUTPUT" >> preview.md
            echo '```' >> preview.md
            echo "" >> preview.md
            echo "</details>" >> preview.md
          fi
          
          echo "" >> preview.md
          echo "---" >> preview.md
          echo "*This preview is based on the conventional commit format. Actual release will happen when PR is merged to main.*" >> preview.md

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
             const preview = fs.readFileSync('preview.md', 'utf8');
            
             // Check if we already have a preview comment
             const { data: comments } = await github.rest.issues.listComments({
               owner: context.repo.owner,
               repo: context.repo.repo,
               issue_number: context.issue.number,
             });
            
             const botComment = comments.find(comment => 
               comment.user.type === 'Bot' && 
               comment.body.includes('## 📦 Release Preview')
             );
            
             if (botComment) {
               // Update existing comment
               await github.rest.issues.updateComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 comment_id: botComment.id,
                 body: preview
               });
             } else {
               // Create new comment
               await github.rest.issues.createComment({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 issue_number: context.issue.number,
                 body: preview
               });
             }

  release:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - uses: actions/download-artifact@v4.3.0
        with:
          name: dist
          path: dist

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release