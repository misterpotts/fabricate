name: Module CI/CD

on: 
  push:
    branches:
      - main
  pull_request:

jobs: 
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install
        shell: bash
        run: npm install

      - name: Test
        shell: bash
        run: npm run coverageTest

      - name: Build
        shell: bash
        run: npm run build

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  release:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      # Get the version from 'package.json'
      - name: Get Version
        shell: bash
        id: get-version
        run: echo "version=$(node ./.github/scripts/get-version.js)" >> $GITHUB_OUTPUT

      # Get the includes from 'module.json'
      - name: Get Includes
        shell: bash
        id: get-includes
        run: echo "files=$(node ./.github/scripts/get-includes.js)" >> $GITHUB_OUTPUT

      # Substitute the Manifest and Download URLs,as well as the version, in module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: './dist/module.json'
        env:
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{steps.get-version.outputs.version}}/module.zip
          version: ${{steps.get-version.outputs.version}}

      # Create a zip file with all files required by the module to add to the release
      - name: Zip Files
        working-directory: ./dist
        run: zip -r ../module.zip ${{steps.get-includes.outputs.files}}

      # Create a release for this specific version
      - name: Create Version Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true # If a release already exists for this version, skip it
          allowUpdates: false # Releases are immutable, so we don't want to allow updates
          name: Release ${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json,./module.zip'
          tag: ${{ steps.get-version.outputs.version }}